<%= simple_form_for(@user, url: @user.new_record? ? create_user_path : update_user_path(encrypt_value(@user.id)), html: { autocomplete: 'off' }, remote: true) do |f| %>
  <div id="info_form_id" class="w3-modal info_form">
    <div class="w3-modal-content w3-animate-right w3-animate-opacity w3-card-4 w3-round-xlarge w3-modal-content_form">
      <header class="modal__heading">
        <legend class="legend-label">
          <span><%= @user.new_record? ? t(:add) : t(:edit) %> <%= t(:user) %></span>
        </legend>
        <div onclick="document.getElementById('info_form_id').style.display='none'" class="modal__close">
          <%= image_tag "svgs/close.svg"%>
        </div>
      </header>

      <div class="w3-modal-content_form-p">
        <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

        <div class="scroll-container">
          <div class="modal__top-content mb-4 mt-2">
            <div class="row">
              <div class="col">
                <div class="modal__top-content-first">
                  <div class="modal__top-content-first-image-container">
                    <% is_img_path_present = @user&.image_path&.present? %>
                    <!-- close icon -->
                    <%= image_tag "svgs/image_close.svg", id:"cancelButton", style:"display: #{is_img_path_present ? 'inline-block' : 'none'}; width:30px; height:30px", onclick:"cancelImageSelection()" %>
                    <!-- Placeholder image -->
                    <%= image_tag "svgs/image_placeholder.svg", id: "placeholderImage", style:"display: #{is_img_path_present ? 'none': 'inline-block'}"%>
                    <!-- Image preview -->
                    <%= image_tag(handle_display_image(@user), id: "imagePreview", style: "display: #{(is_img_path_present ? 'inline-block' : 'none')}") %>
                  </div>
                </div>
              </div>
              <div class="col">
                <div class="modal__top-content-second">
                  <%= f.hidden_field :image_path, value: @user.image_path if is_img_path_present %> <!-- Hidden field for retaining the image_path state -->
                  <%= f.input :image_path, as: :file, label: false, input_html: { class: "border", id: "fileInput", accept: "image/*", style:'display:none;' } %>
                  <span class="image-text">Image</span>
                  <span class="upload-text">Upload image 600x600</span>
                  <span id="chooseImage" style="cursor:pointer; margin-top:20px;" onclick="triggerFileInput()">
                    <span class="choose me-1">Choose</span>
                  </span>
                </div>
              </div>
            </div>
          </div>

          <%= generate_divider("Bio") %>
          <div class="row" style="margin-right: 10px;">
            <div class="col">
              <%= f.input :firstname, required: true, autofocus: true, label: "Firstname", placeholder: "First Name", input_html: { class: "form-control border" } %>
            </div>
            <div class="col">
              <%= f.input :other_names, required: true, autofocus: true, label: "Other Names", placeholder: "Other Names", input_html: { class: "form-control border" } %>
            </div>
          </div>

          <div class="row" style="margin-right: 10px;">
            <div class="col">
              <%= f.input :email, required: true, autofocus: true, label: "Email", placeholder: "Email", input_html: { class: "form-control border" } %>
            </div>
          </div>

          <%= generate_divider("Auth") %>
          <div class="row" style="margin-right: 10px;">
            <div class="col">
              <%= f.input :username, required: true, autofocus: true, label: "User Name", placeholder: "User Name", input_html: { class: "form-control border" } %>
            </div>
          </div>

          <div class="row" style="margin-right: 10px;">
            <div class="col">
              <%= f.input :password, placeholder: "Password", hint: ("#{@minimum_password_length} characters minimum" if @minimum_password_length), input_html: { id: "password1", autocomplete: 'off', class: "form-control border" } %>
              <%= image_tag('svgs/closed_eye.svg', class: 'positon-input-icon', id: 'toggleEyeCon', style: 'width:1.25rem; height:1.25rem;') %>
            </div>
            <div class="col">
              <%= f.input :password_confirmation, placeholder: "Confirm Password", required: true, input_html: { id: "confirmPassword", class: "form-control border" } %>
              <%= image_tag('svgs/closed_eye.svg', class: 'positon-input-icon', id: 'toggleEye', style: 'width:1.25rem; height:1.25rem;') %>
            </div>
          </div>

          <%= generate_divider("Role") %>
          <%# <div class="row mb-9"> %>
            <div class="col">
              <%= f.input :role_unique_code, required: true, label: "Role", collection: @roles, value_method: :unique_code, selected: @user&.user_role&.role_unique_code, label_method: :name, placeholder: "Role Code", autofocus: true, input_html: { class: "form-control", id: "user_role"}, prompt: "Select Role" %>
            </div>
            <div class="col" id="entity1">
              <%= f.input :assigned_code, label: "Company", collection: @company_infos, required: false, label_method: :entity_name, value_method: :assigned_code, selected: @user&.entity_info&.assigned_code, prompt: "Select Company", input_html:{ id: "entityinfo", class:"form-control border"} %>
            </div>
          <%# </div> %>
        </div>

        <div class="submit__form-btn-container">
          <%= button_tag(type: 'submit', class: "submit__form-button", data: {disable_with: "<i class='fa fa-spinner fa-spin'></i>"}  ) do %>
            Submit
          <% end %>
        </div>
      </div>
    </div>
  </div>
<% end %>

<script>
$(document).ready(function () {
    $('#user_role').select2({
      theme: 'bootstrap-5',
      tags: false
    });
    $('#entityinfo').select2({
      theme: 'bootstrap-5',
      tags: false
    });
// Initially, hide the password field
    $("#confirmPassword").attr("type", "password");
    $("#password1").attr("type", "password");

    // Toggle password visibility when clicking on the image
    $("#toggleEye").click(function() {
      var passwordInput = $("#confirmPassword");
      var currentType = passwordInput.attr("type");

      if (currentType === "password") {
        passwordInput.attr("type", "text");
        $("#toggleEye").attr("src", "<%= asset_path('svgs/open_eye.svg') %>");
      } else {
        passwordInput.attr("type", "password");
        $("#toggleEye").attr("src", "<%= asset_path('svgs/closed_eye.svg') %>");
      }
    });

    $("#toggleEyeCon").click(function() {
      var passwordInput = $("#password1");
      var currentType = passwordInput.attr("type");

      if (currentType === "password") {
        passwordInput.attr("type", "text");
        $("#toggleEyeCon").attr("src", "<%= asset_path('svgs/open_eye.svg') %>"); 
      } else {
        passwordInput.attr("type", "password");
        $("#toggleEyeCon").attr("src", "<%= asset_path('svgs/closed_eye.svg') %>");
      }
    });

  let entityValue = $("#entityinfo").val();

  // Check if entityValue is not empty or if the role is US, AP, or AD
  if (entityValue.trim() !== "" || checkAllowedRole()) {
    $("#entity1").removeClass("d-none");
  }

  $("#user_role").on("change", function () {
    let role = $("#user_role").val();
    let entityValue = $("#entityinfo").val();

    if (role == "US" || role == "AP" || role == "AD" || entityValue.trim() !== "") {
      $("#entity1").removeClass("d-none");
    } else {
      $("#entity1").addClass("d-none");
    }

    // Save the state in a cookie
    document.cookie = "entityDisplay=" + !$("#entity1").hasClass("d-none");

    // Check if role is "SUPER ADMIN" and hide the entity div
    if (role == "SUPER ADMIN") {
      $("#entity1").addClass("d-none");
    }
  });

  // Trigger the change event on page load to handle initial state
  $("#user_role").trigger("change");

  // Function to check if role is allowed
  function checkAllowedRole() {
    let role = $("#user_role").val();
    return role == "ADM";
  }

  // Check the cookie on page load
  let cookies = document.cookie.split("; ");
  for (let i = 0; i < cookies.length; i++) {
    let cookie = cookies[i].split("=");
    if (cookie[0] === "entityDisplay" && cookie[1] === "false") {
      $("#entity1").addClass("d-none");
    }
  }

});


  function showFirstForm(hasImage) {
    document.querySelectorAll('.second-form').forEach(element => {
        element.style.display = 'none';
    });

    document.querySelectorAll('.final-form').forEach(element => {
        element.style.display = 'none';
    });

    document.querySelectorAll('.first-form').forEach(element => {
        element.style.display = 'block';
    });

    document.getElementById('page_id').value = 0;
  }

  function showSecondForm() {
    document.querySelectorAll('.first-form').forEach(element => {
        element.style.display = 'none';
    });

    document.querySelectorAll('.second-form').forEach(element => {
        element.style.display = 'block';
    });

    document.querySelectorAll('.final-form').forEach(element => {
        element.style.display = 'none';
    });

    document.getElementById('page_id').value = 1;
  }

  function showFinalForm() {
    document.querySelectorAll('.second-form').forEach(element => {
        element.style.display = 'none';
    });

    document.querySelectorAll('.first-form').forEach(element => {
        element.style.display = 'none';
    });

    document.querySelectorAll('.final-form').forEach(element => {
        element.style.display = 'block';
    });
  
    document.getElementById('page_id').value = 2;
   
  }

  function closeForm() {
    document.getElementById('info_form_id').style.display = 'none';
  }

  function setFormAttributes(state) {
    document.getElementById("state_id").value = state;
    document.getElementById('page_id').value = 2;
  }

  ///image 
   function triggerFileInput() {
      document.getElementById('fileInput').click();
    }

    // Event listener for file input change
    document.getElementById('fileInput').addEventListener('change', handleFileSelect);

    function handleFileSelect(event) {
      const fileInput = event.target;
      const placeholderImage = document.getElementById('placeholderImage');
      const imagePreview = document.getElementById('imagePreview');
      const cancelButton = document.getElementById('cancelButton');

      if (fileInput.files && fileInput.files[0]) {
        // Check if the file size is less than or equal to 2MB (2 * 1024 * 1024 bytes)
        if (fileInput.files[0].size <= 2 * 1024 * 1024) {
          const reader = new FileReader();

          reader.onload = function (e) {
            // Update image preview source
            console.info('Updating image preview', e.target.result);
            imagePreview.src = e.target.result;
          };

          // Read the selected file as a data URL
          reader.readAsDataURL(fileInput.files[0]);

          // Hide the placeholder image
          placeholderImage.style.display = 'none';

          // Show the image preview
          imagePreview.style.display = 'block';

          // Show the cancel button
          cancelButton.style.display = 'inline-block';
        } else {
          // Display an error message or take appropriate action for exceeding the size limit
          alert("Image size exceeds 2MB. Please choose a smaller image size");
          // Reset the file input
          fileInput.value = '';
        }
      }
    }

    function cancelImageSelection() {
      const fileInput = document.getElementById('fileInput');
      const placeholderImage = document.getElementById('placeholderImage');
      const imagePreview = document.getElementById('imagePreview');
      const cancelButton = document.getElementById('cancelButton');

      // Reset the file input
      fileInput.value = '';

      // Show the placeholder image
      placeholderImage.style.display = 'inline-block';

      // Hide the image preview
      imagePreview.style.display = 'none';

      // Hide the cancel button
      cancelButton.style.display = 'none';
    }


</script>
